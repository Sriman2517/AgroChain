<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AgroChain - User Management</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body class="bg-gray-100 font-sans">
  <div class="container mx-auto px-4 py-8">
    <header class="bg-green-600 text-white p-4 rounded-lg shadow-md mb-6 flex justify-between items-center">
      <h1 class="text-3xl font-bold">User Management</h1>
      <a href="/admin" class="bg-white text-green-600 px-4 py-2 rounded hover:bg-gray-100 transition">
        Back to Dashboard
      </a>
    </header>

    <!-- Filter Controls -->
    <div class="bg-white rounded-lg shadow-md p-4 mb-6">
      <div class="flex flex-wrap gap-4 items-center">
        <div>
          <label for="status-filter" class="block text-sm font-medium text-gray-700 mb-1">Status</label>
          <select id="status-filter" class="border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-500">
            <option value="all">All</option>
            <option value="pending" selected>Pending</option>
            <option value="approved">Approved</option>
            <option value="rejected">Rejected</option>
          </select>
        </div>
        <div>
          <label for="type-filter" class="block text-sm font-medium text-gray-700 mb-1">User Type</label>
          <select id="type-filter" class="border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-500">
            <option value="all">All</option>
            <option value="farmer">Farmer</option>
            <option value="dealer">Dealer</option>
            <option value="retailer">Retailer</option>
          </select>
        </div>
        <div>
          <label for="search" class="block text-sm font-medium text-gray-700 mb-1">Search</label>
          <input type="text" id="search" placeholder="Name, Email, or Username" class="border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-500">
        </div>
        <div class="ml-auto self-end">
          <button id="refresh-btn" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition flex items-center gap-2">
            <i class="fas fa-sync-alt"></i> Refresh
          </button>
        </div>
      </div>
    </div>

    <!-- Users Table -->
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Contact</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Registered</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody id="users-table-body" class="bg-white divide-y divide-gray-200">
            <tr>
              <td colspan="6" class="px-6 py-4 text-center text-gray-500">Loading users...</td>
            </tr>
          </tbody>
        </table>
      </div>
      <div class="bg-gray-50 px-6 py-3 flex items-center justify-between border-t border-gray-200">
        <div class="flex-1 flex justify-between">
          <div>
            <p class="text-sm text-gray-700" id="pagination-info">
              Showing <span class="font-medium">0</span> to <span class="font-medium">0</span> of <span class="font-medium">0</span> results
            </p>
          </div>
          <div>
            <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
              <button id="prev-page" class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                <span class="sr-only">Previous</span>
                <i class="fas fa-chevron-left"></i>
              </button>
              <span id="pagination-pages" class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">
                Page <span id="current-page">1</span> of <span id="total-pages">1</span>
              </span>
              <button id="next-page" class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                <span class="sr-only">Next</span>
                <i class="fas fa-chevron-right"></i>
              </button>
            </nav>
          </div>
        </div>
      </div>
    </div>

    <!-- User Details Modal -->
    <div id="user-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
      <div class="bg-white rounded-lg p-6 max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-xl font-semibold">User Details</h3>
          <button id="close-modal" class="text-gray-500 hover:text-gray-700">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div id="user-details" class="space-y-4">
          <!-- User details will be populated by JavaScript -->
        </div>
        <div id="verification-actions" class="mt-6 flex flex-wrap gap-3 justify-end">
          <button id="approve-btn" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition">
            <i class="fas fa-check mr-2"></i> Approve
          </button>
          <button id="reject-btn" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition">
            <i class="fas fa-times mr-2"></i> Reject
          </button>
          <button id="close-details-btn" class="bg-gray-300 text-gray-800 px-4 py-2 rounded hover:bg-gray-400 transition">
            Close
          </button>
        </div>
      </div>
    </div>

    <!-- Rejection Reason Modal -->
    <div id="rejection-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
      <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-xl font-semibold">Rejection Reason</h3>
          <button id="close-rejection-modal" class="text-gray-500 hover:text-gray-700">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="mb-4">
          <label for="rejection-reason" class="block text-sm font-medium text-gray-700 mb-2">Please provide a reason for rejection:</label>
          <textarea id="rejection-reason" rows="4" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-red-500"></textarea>
        </div>
        <div class="flex justify-end gap-3">
          <button id="confirm-reject-btn" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition">
            Confirm Rejection
          </button>
          <button id="cancel-reject-btn" class="bg-gray-300 text-gray-800 px-4 py-2 rounded hover:bg-gray-400 transition">
            Cancel
          </button>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // DOM Elements
      const usersTableBody = document.getElementById('users-table-body');
      const statusFilter = document.getElementById('status-filter');
      const typeFilter = document.getElementById('type-filter');
      const searchInput = document.getElementById('search');
      const refreshBtn = document.getElementById('refresh-btn');
      const prevPageBtn = document.getElementById('prev-page');
      const nextPageBtn = document.getElementById('next-page');
      const currentPageEl = document.getElementById('current-page');
      const totalPagesEl = document.getElementById('total-pages');
      const paginationInfo = document.getElementById('pagination-info');
      
      // Modals
      const userModal = document.getElementById('user-modal');
      const closeModal = document.getElementById('close-modal');
      const closeDetailsBtn = document.getElementById('close-details-btn');
      const userDetails = document.getElementById('user-details');
      const approveBtn = document.getElementById('approve-btn');
      const rejectBtn = document.getElementById('reject-btn');
      const verificationActions = document.getElementById('verification-actions');
      
      // Rejection Modal
      const rejectionModal = document.getElementById('rejection-modal');
      const closeRejectionModal = document.getElementById('close-rejection-modal');
      const rejectionReason = document.getElementById('rejection-reason');
      const confirmRejectBtn = document.getElementById('confirm-reject-btn');
      const cancelRejectBtn = document.getElementById('cancel-reject-btn');
      
      // Pagination state
      let currentPage = 1;
      let totalPages = 1;
      let pageSize = 10;
      let currentUserId = null;
      
      // Initial load
      fetchUsers();
      
      // Event listeners
      statusFilter.addEventListener('change', () => {
        currentPage = 1;
        fetchUsers();
      });
      
      typeFilter.addEventListener('change', () => {
        currentPage = 1;
        fetchUsers();
      });
      
      searchInput.addEventListener('input', debounce(() => {
        currentPage = 1;
        fetchUsers();
      }, 300));
      
      refreshBtn.addEventListener('click', fetchUsers);
      
      prevPageBtn.addEventListener('click', () => {
        if (currentPage > 1) {
          currentPage--;
          fetchUsers();
        }
      });
      
      nextPageBtn.addEventListener('click', () => {
        if (currentPage < totalPages) {
          currentPage++;
          fetchUsers();
        }
      });
      
      closeModal.addEventListener('click', () => {
        userModal.classList.add('hidden');
      });
      
      closeDetailsBtn.addEventListener('click', () => {
        userModal.classList.add('hidden');
      });
      
      approveBtn.addEventListener('click', () => {
        if (currentUserId) {
          approveUser(currentUserId);
        }
      });
      
      rejectBtn.addEventListener('click', () => {
        if (currentUserId) {
          rejectionReason.value = '';
          rejectionModal.classList.remove('hidden');
        }
      });
      
      closeRejectionModal.addEventListener('click', () => {
        rejectionModal.classList.add('hidden');
      });
      
      cancelRejectBtn.addEventListener('click', () => {
        rejectionModal.classList.add('hidden');
      });
      
      confirmRejectBtn.addEventListener('click', () => {
        if (currentUserId) {
          const reason = rejectionReason.value.trim();
          if (!reason) {
            alert('Please provide a reason for rejection');
            return;
          }
          
          rejectUser(currentUserId, reason);
          rejectionModal.classList.add('hidden');
        }
      });
      
      // Functions
      function fetchUsers() {
        const status = statusFilter.value;
        const type = typeFilter.value;
        const search = searchInput.value.trim();
        
        // Show loading state
        usersTableBody.innerHTML = '<tr><td colspan="6" class="px-6 py-4 text-center text-gray-500">Loading users...</td></tr>';
        
        // Fetch users from API
        fetch(`/api/admin/users?status=${status}&type=${type}&search=${search}&page=${currentPage}&pageSize=${pageSize}`)
          .then(response => response.json())
          .then(data => {
            if (data.users.length === 0) {
              usersTableBody.innerHTML = '<tr><td colspan="6" class="px-6 py-4 text-center text-gray-500">No users found</td></tr>';
              updatePagination(0, 0, 0);
              return;
            }
            
            // Update pagination
            updatePagination(data.currentPage, data.totalPages, data.totalUsers);
            
            // Render users
            usersTableBody.innerHTML = '';
            data.users.forEach(user => {
              const row = document.createElement('tr');
              row.className = user.verification_status === 'pending' ? 'bg-yellow-50' : '';
              
              // Format date
              const registeredDate = new Date(user.registeredAt);
              const formattedDate = registeredDate.toLocaleDateString() + ' ' + registeredDate.toLocaleTimeString();
              
              // Status badge class
              let statusClass = '';
              switch(user.verification_status) {
                case 'pending':
                  statusClass = 'bg-yellow-100 text-yellow-800';
                  break;
                case 'approved':
                  statusClass = 'bg-green-100 text-green-800';
                  break;
                case 'rejected':
                  statusClass = 'bg-red-100 text-red-800';
                  break;
                default:
                  statusClass = 'bg-gray-100 text-gray-800';
              }
              
              row.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex items-center">
                    <div class="flex-shrink-0 h-10 w-10 bg-gray-200 rounded-full flex items-center justify-center">
                      <span class="text-gray-500 font-bold">${user.firstName.charAt(0)}${user.lastName.charAt(0)}</span>
                    </div>
                    <div class="ml-4">
                      <div class="text-sm font-medium text-gray-900">${user.firstName} ${user.lastName}</div>
                      <div class="text-sm text-gray-500">@${user.username}</div>
                    </div>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                    ${user.type.charAt(0).toUpperCase() + user.type.slice(1)}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm text-gray-900">${user.email}</div>
                  <div class="text-sm text-gray-500">${user.phone}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${statusClass}">
                    ${user.verification_status.charAt(0).toUpperCase() + user.verification_status.slice(1)}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  ${formattedDate}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <button class="text-blue-600 hover:text-blue-900 mr-3 view-details" data-id="${user.id}">
                    View Details
                  </button>
                  ${user.verification_status === 'pending' ? `
                    <button class="text-green-600 hover:text-green-900 mr-3 approve-user" data-id="${user.id}">
                      Approve
                    </button>
                    <button class="text-red-600 hover:text-red-900 reject-user" data-id="${user.id}">
                      Reject
                    </button>
                  ` : ''}
                </td>
              `;
              
              usersTableBody.appendChild(row);
            });
            
            // Add event listeners to action buttons
            document.querySelectorAll('.view-details').forEach(button => {
              button.addEventListener('click', () => {
                const userId = button.getAttribute('data-id');
                viewUserDetails(userId);
              });
            });
            
            document.querySelectorAll('.approve-user').forEach(button => {
              button.addEventListener('click', () => {
                const userId = button.getAttribute('data-id');
                approveUser(userId);
              });
            });
            
            document.querySelectorAll('.reject-user').forEach(button => {
              button.addEventListener('click', () => {
                const userId = button.getAttribute('data-id');
                currentUserId = userId;
                rejectionReason.value = '';
                rejectionModal.classList.remove('hidden');
              });
            });
          })
          .catch(error => {
            console.error('Error fetching users:', error);
            usersTableBody.innerHTML = '<tr><td colspan="6" class="px-6 py-4 text-center text-red-500">Error loading users</td></tr>';
          });
      }
      
      function viewUserDetails(userId) {
        fetch(`/api/admin/users/${userId}`)
          .then(response => response.json())
          .then(user => {
            currentUserId = user.id;
            
            // Format date
            const registeredDate = new Date(user.registeredAt);
            const formattedDate = registeredDate.toLocaleDateString() + ' ' + registeredDate.toLocaleTimeString();
            
            // Show or hide verification actions based on status
            if (user.verification_status === 'pending') {
              verificationActions.classList.remove('hidden');
              approveBtn.classList.remove('hidden');
              rejectBtn.classList.remove('hidden');
            } else {
              verificationActions.classList.remove('hidden');
              approveBtn.classList.add('hidden');
              rejectBtn.classList.add('hidden');
            }
            
            // Populate user details
            userDetails.innerHTML = `
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <h4 class="text-lg font-semibold mb-2">Personal Information</h4>
                  <div class="bg-gray-50 p-4 rounded-lg">
                    <div class="mb-2">
                      <span class="text-gray-600 font-medium">Name:</span>
                      <span>${user.firstName} ${user.lastName}</span>
                    </div>
                    <div class="mb-2">
                      <span class="text-gray-600 font-medium">Username:</span>
                      <span>@${user.username}</span>
                    </div>
                    <div class="mb-2">
                      <span class="text-gray-600 font-medium">Email:</span>
                      <span>${user.email}</span>
                    </div>
                    <div class="mb-2">
                      <span class="text-gray-600 font-medium">Phone:</span>
                      <span>${user.phone}</span>
                    </div>
                    <div class="mb-2">
                      <span class="text-gray-600 font-medium">User Type:</span>
                      <span>${user.type.charAt(0).toUpperCase() + user.type.slice(1)}</span>
                    </div>
                    <div class="mb-2">
                      <span class="text-gray-600 font-medium">Registered:</span>
                      <span>${formattedDate}</span>
                    </div>
                    <div>
                      <span class="text-gray-600 font-medium">Status:</span>
                      <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                        ${user.verification_status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 
                          user.verification_status === 'approved' ? 'bg-green-100 text-green-800' : 
                          'bg-red-100 text-red-800'}">
                        ${user.verification_status.charAt(0).toUpperCase() + user.verification_status.slice(1)}
                      </span>
                    </div>
                  </div>
                </div>
                
                <div>
                  <h4 class="text-lg font-semibold mb-2">Address Information</h4>
                  <div class="bg-gray-50 p-4 rounded-lg">
                    <div class="mb-2">
                      <span class="text-gray-600 font-medium">Address:</span>
                      <span>${user.address}</span>
                    </div>
                    <div class="mb-2">
                      <span class="text-gray-600 font-medium">State:</span>
                      <span>${user.state}</span>
                    </div>
                    <div>
                      <span class="text-gray-600 font-medium">Aadhar Number:</span>
                      <span>${user.aadhar}</span>
                    </div>
                  </div>
                </div>
              </div>
              
              ${user.verification_status === 'rejected' && user.rejection_reason ? `
                <div class="mt-4">
                  <h4 class="text-lg font-semibold mb-2">Rejection Reason</h4>
                  <div class="bg-red-50 p-4 rounded-lg text-red-800">
                    ${user.rejection_reason}
                  </div>
                </div>
              ` : ''}
            `;
            
            // Show modal
            userModal.classList.remove('hidden');
          })
          .catch(error => {
            console.error('Error fetching user details:', error);
            alert('Error loading user details');
          });
      }
      
      function approveUser(userId) {
        if (!confirm('Are you sure you want to approve this user?')) {
          return;
        }
        
        fetch(`/api/admin/users/${userId}/approve`, {
          method: 'PUT'
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              alert('User approved successfully');
              userModal.classList.add('hidden');
              fetchUsers();
            } else {
              alert(data.error || 'Error approving user');
            }
          })
          .catch(error => {
            console.error('Error approving user:', error);
            alert('Error approving user');
          });
      }
      
      function rejectUser(userId, reason) {
        fetch(`/api/admin/users/${userId}/reject`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ reason })
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              alert('User rejected successfully');
              userModal.classList.add('hidden');
              fetchUsers();
            } else {
              alert(data.error || 'Error rejecting user');
            }
          })
          .catch(error => {
            console.error('Error rejecting user:', error);
            alert('Error rejecting user');
          });
      }
      
      function updatePagination(current, total, totalItems) {
        currentPage = current;
        totalPages = total;
        
        currentPageEl.textContent = current;
        totalPagesEl.textContent = total;
        
        // Update pagination info
        const start = (current - 1) * pageSize + 1;
        const end = Math.min(start + pageSize - 1, totalItems);
        
        if (totalItems > 0) {
          paginationInfo.innerHTML = `
            Showing <span class="font-medium">${start}</span> to <span class="font-medium">${end}</span> of <span class="font-medium">${totalItems}</span> results
          `;
        } else {
          paginationInfo.innerHTML = 'No results found';
        }
        
        // Enable/disable pagination buttons
        prevPageBtn.disabled = current <= 1;
        nextPageBtn.disabled = current >= total;
        
        prevPageBtn.classList.toggle('opacity-50', current <= 1);
        nextPageBtn.classList.toggle('opacity-50', current >= total);
      }
      
      // Utility function for debouncing
      function debounce(func, wait) {
        let timeout;
        return function() {
          const context = this;
          const args = arguments;
          clearTimeout(timeout);
          timeout = setTimeout(() => {
            func.apply(context, args);
          }, wait);
        };
      }
    });
  </script>
</body>
</html>
